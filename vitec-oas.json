{
"openapi": "3.0.1",
"info": {
"title": "Electronic Property Settlement Api",
"description": "Electronic Property Settlement (Elektronisk Eiendomsoppgjør), is a B2B service for supporting the settlement process of selling real estate. ",
"termsOfService": "https://www.ambita.com/kundeavtale/",
"contact": {
"name": "Kundeservice",
"url": "https://www.ambita.com/kundeservice/"
},
"version": "v1"
},
"servers": [
{
"url": "http://localhost:8080/eps",
"description": "Generated server url"
}
],
"security": [
{
"Bearer": []
}
],
"tags": [
{
"name": "Code register",
"description": "API for querying codes and templates",
"externalDocs": {
"description": "About code register",
"url": "https://beta-api.ambita.com/docs/eps-guide.html#list-of-available-declarations"
}
},
{
"name": "Attachment",
"description": "API for creating and retrieving attachment to/from a document in a settlement",
"externalDocs": {
"description": "Attachements for documents",
"url": "https://beta-api.ambita.com/docs/eps-guide.html#list-of-available-declarations"
}
},
{
"name": "Event",
"description": "API for querying for a set of EPS events",
"externalDocs": {
"description": "About events",
"url": "https://beta-api.ambita.com/docs/eps-guide.html#monitoring-settlements"
}
},
{
"name": "Akeldo",
"description": "API for querying Akeldo - Aktørregister for elektronisk dokumentutveksling"
},
{
"name": "Validate Flow",
"description": "Determine if flow requires manual (paper) processing."
},
{
"name": "Settlement",
"description": "API for creating and retrieving settlements, as well as managing the intentions and documents from banks",
"externalDocs": {
"description": "About settlements",
"url": "https://beta-api.ambita.com/docs/eps-guide.html#the-settlement-process"
}
},
{
"name": "BankIntention",
"description": "Endpoints for handling bank intentions.",
"externalDocs": {
"description": "About bank intentions",
"url": "https://beta-api.ambita.com/docs/eps-guide.html#intention-from-bank"
}
}
],
"paths": {
"/v1/settlements/{uid}/status": {
"put": {
"tags": [
"Settlement"
],
"operationId": "changeSettlementStatus",
"parameters": [
{
"name": "uid",
"in": "path",
"description": "Settlement unique id",
"required": true,
"schema": {
"type": "string"
}
}
],
"requestBody": {
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/SettlementStatusChangeAction"
}
}
},
"required": true
},
"responses": {
"200": {
"description": "OK"
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Not Found",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
},
"deprecated": true
}
},
"/v1/settlements/{uid}": {
"get": {
"tags": [
"Settlement"
],
"summary": "Get settlement by uid",
"description": "Intentions should be sorted in descended order by creation timestamp.",
"operationId": "getSettlement",
"parameters": [
{
"name": "uid",
"in": "path",
"description": "Settlement unique identifier",
"required": true,
"schema": {
"type": "string"
}
}
],
"responses": {
"200": {
"description": "Ok",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/SettlementResource"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Settlement not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
},
"put": {
"tags": [
"Settlement"
],
"summary": "Update settlement.",
"operationId": "updateSettlement",
"parameters": [
{
"name": "uid",
"in": "path",
"description": "Settlement unique identifier",
"required": true,
"schema": {
"type": "string"
}
}
],
"requestBody": {
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/SettlementRequest"
}
}
},
"required": true
},
"responses": {
"200": {
"description": "Settlement updated",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/SettlementResource"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Settlement not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
},
"delete": {
"tags": [
"Settlement"
],
"summary": "Delete settlement",
"operationId": "deleteSettlement",
"parameters": [
{
"name": "uid",
"in": "path",
"required": true,
"schema": {
"type": "string"
}
}
],
"responses": {
"204": {
"description": "Settlement deleted"
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Settlement not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/documents/{uid}/status": {
"put": {
"tags": [
"Document"
],
"summary": "Change document status",
"operationId": "acceptDocument",
"parameters": [
{
"name": "uid",
"in": "path",
"description": "Document unique id",
"required": true,
"schema": {
"type": "string"
}
}
],
"requestBody": {
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/DocumentStatusChangeAction"
}
}
},
"required": true
},
"responses": {
"200": {
"description": "Document is set to accepted status"
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Document not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/documents/{uid}/resend": {
"put": {
"tags": [
"Document"
],
"summary": "Resend document to broker",
"description": "Resend a previously sent document",
"operationId": "resendDocument",
"parameters": [
{
"name": "uid",
"in": "path",
"description": "Document unique id of previously sent mortgage document",
"required": true,
"schema": {
"type": "string"
}
}
],
"responses": {
"200": {
"description": "Document is resent",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/DocumentResource"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Document not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/settlements/{uid}/intent": {
"post": {
"tags": [
"Settlement"
],
"summary": "Save intention from bank",
"operationId": "saveIntentionFromBank",
"parameters": [
{
"name": "uid",
"in": "path",
"description": "Settlement unique id",
"required": true,
"schema": {
"type": "string"
}
}
],
"requestBody": {
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/IntentionFromBankRequest"
}
}
},
"required": true
},
"responses": {
"200": {
"description": "Bank intention posted on settlement"
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Settlement not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/settlements": {
"get": {
"tags": [
"Settlement"
],
"summary": "Find settlements by buyer identification number and/or property key",
"operationId": "findSettlements",
"parameters": [
{
"name": "buyerIdentificationNumber",
"in": "query",
"description": "Buyer Personal Number",
"required": false,
"schema": {
"uniqueItems": true,
"type": "array",
"items": {
"type": "string"
}
}
},
{
"name": "propertyKey",
"in": "query",
"description": "Property key",
"required": false,
"schema": {
"type": "string"
}
},
{
"name": "isFinancialSource",
"in": "query",
"description": "Find settlements where your organizations is a financial source",
"required": false,
"schema": {
"type": "boolean"
}
},
{
"name": "from",
"in": "query",
"description": "Find settlements created after date, only applied if 'isFinancialSource' is set. Format: yyyy-MM-ddTHH:mm:ss.SSS",
"required": false,
"schema": {
"type": "string",
"format": "date-time"
}
},
{
"name": "pageable",
"in": "query",
"required": true,
"schema": {
"$ref": "#/components/schemas/Pageable"
}
}
],
"responses": {
"200": {
"description": "Ok",
"content": {
"application/json": {
"schema": {
"type": "array",
"items": {
"$ref": "#/components/schemas/SettlementResource"
}
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Not Found",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
},
"post": {
"tags": [
"Settlement"
],
"summary": "Create settlement",
"operationId": "createSettlement",
"requestBody": {
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/SettlementRequest"
}
}
},
"required": true
},
"responses": {
"201": {
"description": "Settlement created",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/SettlementResource"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Not Found",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/documents/{uid}/details": {
"get": {
"tags": [
"Document"
],
"summary": "Get document details by document unique id ",
"operationId": "getDocumentDetails",
"parameters": [
{
"name": "uid",
"in": "path",
"description": "Document unique id",
"required": true,
"schema": {
"type": "string"
}
}
],
"responses": {
"200": {
"description": "Ok",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/DocumentMeta"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Document not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
},
"post": {
"tags": [
"Document"
],
"summary": "Set information from tinglysing",
"operationId": "saveDocumentDetails",
"parameters": [
{
"name": "uid",
"in": "path",
"description": "Document unique id",
"required": true,
"schema": {
"type": "string"
}
}
],
"requestBody": {
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/DocumentDetailRequest"
}
}
},
"required": true
},
"responses": {
"200": {
"description": "Details added to the document",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/DocumentDetailRequest"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Document not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/documents": {
"get": {
"tags": [
"Document"
],
"summary": "Get all pantedokumenter with given statuses that logged in user has access to",
"operationId": "getListOfDocuments",
"parameters": [
{
"name": "status",
"in": "query",
"description": "Document status",
"required": true,
"schema": {
"type": "array",
"items": {
"type": "string"
}
}
},
{
"name": "includeTinglyste",
"in": "query",
"description": "Include tinglyste documents",
"required": false,
"schema": {
"type": "boolean",
"default": true
}
}
],
"responses": {
"200": {
"description": "Ok",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/DocumentResource"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Not Found",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
},
"post": {
"tags": [
"Document"
],
"summary": "Save document ",
"description": "Save document using b64 encoding",
"operationId": "saveDocument",
"parameters": [
{
"name": "settlementuid",
"in": "query",
"description": "Settlement to add document to ",
"required": false,
"schema": {
"type": "string"
}
}
],
"requestBody": {
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/DocumentRequest"
}
}
},
"required": true
},
"responses": {
"201": {
"description": "Document created",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/DocumentResource"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Not Found",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/bankintentions": {
"post": {
"tags": [
"BankIntention"
],
"summary": "Create bank intention",
"operationId": "createBankIntention",
"requestBody": {
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/BankIntentionRequest"
}
}
},
"required": true
},
"responses": {
"201": {
"description": "Successfully received by broker",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/BankIntentionResource"
}
}
}
},
"202": {
"description": "Sent to broker, awaiting response",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/BankIntentionResource"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Not Found",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/attachments": {
"get": {
"tags": [
"Attachment"
],
"summary": "Get list of attachments for a document with given document-uid ",
"operationId": "getAttachments",
"parameters": [
{
"name": "documentuid",
"in": "query",
"description": "Document unique id",
"required": true,
"schema": {
"type": "string"
}
}
],
"responses": {
"200": {
"description": "Ok",
"content": {
"application/json": {
"schema": {
"type": "array",
"items": {
"$ref": "#/components/schemas/AttachmentResource"
}
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Not Found",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
},
"post": {
"tags": [
"Attachment"
],
"summary": "Save an attachment, adding to a document",
"operationId": "saveAttachment",
"parameters": [
{
"name": "documentuid",
"in": "query",
"description": "Document unique id",
"required": true,
"schema": {
"type": "string"
}
}
],
"requestBody": {
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/AttachmentRequest"
}
}
},
"required": true
},
"responses": {
"201": {
"description": "Attachment created",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/AttachmentResource"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Not Found",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/settlements/{uid}/documents": {
"get": {
"tags": [
"Settlement"
],
"summary": "Get all documents for a settlement",
"operationId": "documentsForSettlement",
"parameters": [
{
"name": "uid",
"in": "path",
"description": "Settlement unique identifier",
"required": true,
"schema": {
"type": "string"
}
}
],
"responses": {
"200": {
"description": "Ok",
"content": {
"application/json": {
"schema": {
"type": "array",
"items": {
"$ref": "#/components/schemas/DocumentResource"
}
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Settlement not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/settlements/{uid}/brokerdeclaration": {
"get": {
"tags": [
"Settlement"
],
"summary": "Get the broker declaration for the settlement",
"operationId": "brokerdeclaration",
"parameters": [
{
"name": "uid",
"in": "path",
"description": "Settlement unique identifier",
"required": true,
"schema": {
"type": "string"
}
}
],
"responses": {
"200": {
"description": "Ok",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/BrokerDeclaration"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Settlement not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/ping": {
"get": {
"tags": [
"Ping"
],
"summary": "Ping eps service",
"operationId": "ping",
"responses": {
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Not Found",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Server error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"503": {
"description": "Service Unavailable",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/PingResponse"
}
}
}
}
}
}
},
"/v1/flowvalidations/{propertykey}": {
"get": {
"tags": [
"Validate Flow"
],
"summary": "Validate flow for property",
"description": "\nDetermine flow for property according to the following rules: : ( _mix of English and Norwegian due to translation difficulties_ )\n* Property/Cooperative share that has seller that are registered as owner in the grunnbok with serial number, the flow will be paperbased.\n* Property/Cooperative share that has right holder in urådighet (rettstype SP, CA, AH) with serial number, the flow will be paperbased.\n* Property that does not have acreage (areal) in cadaster, the flow will be paperbased. Sections are exempt from the \"konsesjonsloven\" and shall not be included in the acreage check. Cooperative shares are exempt from the \"konsesjonsloven\" in respect of the property of the housing cooperative, and shall not be included in the area check.\n* Property/Cooperative share that has seller that is under 18 years of age, the flow will be paperbased.\n* Property/Cooperative shares that has has sovereignty limitation(råderettsbegrensende) remarks(påtegning) on a person the flow will be paperbased. Document types that will block for digital registration: \n  * Anmerkning på person ET, AI (konkurs, vergemål, akkord, offentlig administrasjon, \n  * Anmerkning på registerenhetsrettsandel EN, AB (Offentlig skifte,Tvangsauksjon og Fremtidsfullmakt)\n* En borettsandel(Cooperative share) som ligger i en kommune med nedsatt konsesjonsgrense, the flow will be paperbased.\n* En borettsandel(Cooperative share) hvor det er tinglyst borett iht. brl §2-13, the flow will be paperbased.\n",
"operationId": "validateFlow",
"parameters": [
{
"name": "propertykey",
"in": "path",
"description": "Propertykey",
"required": true,
"schema": {
"type": "string"
},
"example": "1201-10-10"
}
],
"responses": {
"200": {
"description": "Ok",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/FlowValidationResource"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Not Found",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/events/{id}": {
"get": {
"tags": [
"Event"
],
"summary": "Get event by id ",
"operationId": "getEvent",
"parameters": [
{
"name": "id",
"in": "path",
"description": "Event incremental id",
"required": true,
"schema": {
"type": "integer",
"format": "int64"
},
"example": 1000
}
],
"responses": {
"200": {
"description": "Ok",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/EventResource"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Event not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/events": {
"get": {
"tags": [
"Event"
],
"summary": "Find events ",
"operationId": "findEvents",
"parameters": [
{
"name": "settlementuid",
"in": "query",
"description": "Settlement unique identifier",
"required": false,
"schema": {
"type": "string"
}
},
{
"name": "eventtype",
"in": "query",
"description": "Event type",
"required": false,
"schema": {
"type": "array",
"items": {
"type": "string"
}
}
},
{
"name": "fromeventid",
"in": "query",
"description": "Starting from specific event id",
"required": false,
"schema": {
"type": "integer",
"format": "int64",
"default": 0
},
"example": 1000
},
{
"name": "maximumNumberOfEvents",
"in": "query",
"description": "Maximum number of events returned",
"required": false,
"schema": {
"type": "integer",
"format": "int32",
"default": 500
},
"example": 100
},
{
"name": "fromeventcreated",
"in": "query",
"description": "Starting from creation date with format: yyyy-MM-ddTHH:mm:ss.SSS",
"required": false,
"schema": {
"type": "string",
"format": "date-time"
}
}
],
"responses": {
"200": {
"description": "Ok",
"content": {
"application/json": {
"schema": {
"type": "array",
"items": {
"$ref": "#/components/schemas/EventResource"
}
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Not Found",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/documents/{uid}/info": {
"get": {
"tags": [
"Document"
],
"summary": "Get all document information (does not include the byte[]) by document unique id.",
"operationId": "getDocumentInfo",
"parameters": [
{
"name": "uid",
"in": "path",
"description": "Document unique id",
"required": true,
"schema": {
"type": "string"
}
}
],
"responses": {
"200": {
"description": "Ok",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/Document"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Document not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/documents/{uid}/attachments": {
"get": {
"tags": [
"Document"
],
"summary": "Get all attachments for document identified by the uniqueIdentifier provided by EPS during document creation, and by the attachment type (optional) ",
"operationId": "getAllAttachments",
"parameters": [
{
"name": "uid",
"in": "path",
"description": "Document uniqueIdentifier",
"required": true,
"schema": {
"type": "string"
}
},
{
"name": "attachmenttype",
"in": "query",
"description": "Attachment type",
"required": false,
"schema": {
"type": "array",
"items": {
"$ref": "#/components/schemas/AttachmentType"
}
}
}
],
"responses": {
"200": {
"description": "Ok",
"content": {
"application/json": {
"schema": {
"type": "array",
"items": {
"$ref": "#/components/schemas/AttachmentResource"
}
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Not Found",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/documents/{uid}": {
"get": {
"tags": [
"Document"
],
"summary": "Get document identified by the uniqueIdentifier provided by EPS during document creation",
"operationId": "getDocument",
"parameters": [
{
"name": "uid",
"in": "path",
"description": "Document uniqueIdentifier",
"required": true,
"schema": {
"type": "string"
}
}
],
"responses": {
"200": {
"description": "Ok",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/DocumentResource"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Document not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/coderegister/eventcodes/{code}": {
"get": {
"tags": [
"Code register"
],
"summary": "Get one event code",
"operationId": "getEventCode",
"parameters": [
{
"name": "code",
"in": "path",
"description": "Event code",
"required": true,
"schema": {
"type": "string"
}
}
],
"responses": {
"200": {
"description": "Ok",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/EpsCode"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Code not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/coderegister/eventcodes": {
"get": {
"tags": [
"Code register"
],
"summary": "Get a list of all event codes",
"operationId": "getEventCodes",
"responses": {
"200": {
"description": "Ok",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/EventCodesResource"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Not Found",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/coderegister/errorcodes/{code}": {
"get": {
"tags": [
"Code register"
],
"summary": "Get one error code",
"operationId": "getErrorCode",
"parameters": [
{
"name": "code",
"in": "path",
"description": "Error code",
"required": true,
"schema": {
"type": "string"
}
}
],
"responses": {
"200": {
"description": "Ok",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/EpsCode"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Code not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/coderegister/errorcodes": {
"get": {
"tags": [
"Code register"
],
"summary": "Get a list of all error codes",
"operationId": "getErrorCodes",
"responses": {
"200": {
"description": "Ok",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/EventCodesResource"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Not Found",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/coderegister/brokerdeclarationtemplates": {
"get": {
"tags": [
"Code register"
],
"summary": "Get a list of all declarations",
"description": "The current set af all declaration defined by eps. The operation is meant for clients that need to refresh the list of brokerdeclarationsThe below descriptions are fetched from the above resource (only served in Norwegian).\n\n|key|flowCriteria|order|longDescription|\n|--- |--- |--- |--- |\n|NOT_ABLE_TO_SIGN_ELECTRONICALLY|Minst en av partene må signere på papir.|10|Vilkår for elektronisk tinglysing er at alle parter som skal signere dokumentene kan signere med BankID (selger, kjøper, bortfester, rettighetshaver). Dersom minst en av partene må signere på papir må det svares Ja på spørsmålet.|\n|CAN_NOT_PRODUCE_DIGITAL_PANTEDOKUMENT|Minst en bank må levere pantedokument på papir.|20|Vilkår for elektronisk tinglysing er at alle involverte banker kan levere digitalt pantedokument til megler. Dersom minst en av bankene må levere pantedokumentet på papir må det svares Ja på spørsmålet.|\n|TRANSFER_CONTAINS_OF_OTHER_DEALS_TO_TINGLYSE|Overdragelsen inneholder andre avtaler som skal tinglyses.|30|Dersom andre avtaler skal tinglyses sammen med overdragelsen (pkt.6 i papirskjøtet) må overdragelsen opprettes på papir. Eksempel på andre avtaler kan være vegrett, forkjøpsrett, borett o.l. Årsaken er begrensninger i Kartverkets tinglysningssystem.|\n|TRANSFER_DEMANDS_ATTACHMENTS|Overdragelsen krever vedlegg.|40|Dersom tinglysing av overdragelsen krever at det medfølger vedlegg må skjøtet opprettes på papir. Vedlegg kan være kjøpekontrakt, fullmakt, firmaattest o.l. Årsaken er begrensninger i Kartverkets tinglysningssystem.|\n|TRANSFER_FROM_OTHER_THAN_HJEMMELSHAVER|Overdragelsen gjelder salg fra andre enn hjemmelshaver.|50|Dersom selger i overdragelsen ikke har grunnbokshjemmel, og hjemmelshaver samtykker til tinglysing, må skjøtet tinglyses på papir. Eksempel kan være ved salg av nybygg hvor utbygger ikke er tinglyst som hjemmelshaver til eiendommen. I slike overdragelser er utbygger oppført som selger, og hjemmelshaver signerer/samtykker til tinglysing på skjøtet. Årsaken er begrensninger i Kartverkets tinglysningssystem.|\n|TRANSFER_IS_INHERITANCE|Overdragelsen gjelder arveoppgjør.|60|Tinglysing av overdragelse i forbindelse med arveoppgjør (hjemmelserklæring og skifteattest) er ikke tilgjengelig for elektronisk tinglysing. Årsaken er begrensninger i Kartverkets tinglysningssystem.|\n|TRANSFER_CONTAINS_DELETION_OF_FESTEKONTRAKT|Overdragelsen inneholder sletting av festekontrakt.|70|Dersom overdragelsen inneholder frikjøp av festegrunn og sletting av festekontrakten, må overdragelsen tinglyses på papir. Årsaken er begrensninger i Kartverkets tinglysningssystem.|\n|TRANSFER_IS_BORETT_2_13|Overdragelsen gjelder etablering av borett iht. brl § 2-13.|80|Dersom det inngås avtale med utbygger om borett iht. brl § 2-13 må overdragelsen tinglyses på papir. Årsaken er begrensninger i Kartverkets tinglysningssystem.|\n",
"operationId": "getBrokerDeclarationTemplates",
"responses": {
"200": {
"description": "Ok",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/BrokerDeclarationTemplateResource"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Not Found",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/bankintentions/{uid}": {
"get": {
"tags": [
"BankIntention"
],
"summary": "Get bank intention.",
"operationId": "getBankIntention",
"parameters": [
{
"name": "uid",
"in": "path",
"description": "Bank intention unique identifier",
"required": true,
"schema": {
"type": "string"
}
}
],
"responses": {
"200": {
"description": "Ok",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/BankIntentionResource"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Bank intention not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/attachments/{uid}": {
"get": {
"tags": [
"Attachment"
],
"summary": "Get attachment by uid ",
"operationId": "getAttachment",
"parameters": [
{
"name": "uid",
"in": "path",
"description": "Attachment unique id",
"required": true,
"schema": {
"type": "string"
}
}
],
"responses": {
"200": {
"description": "Ok",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/AttachmentResource"
}
}
}
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Attachment not found",
"content": {
"application/json": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
},
"/v1/akeldo/{organizationNumber}/{messageType}": {
"get": {
"tags": [
"Akeldo"
],
"description": "Query the Akeldo register if orgNumber can process messages of type messageType, get true / false in return",
"operationId": "existsInAkeldo",
"parameters": [
{
"name": "organizationNumber",
"in": "path",
"description": "Organization number",
"required": true,
"schema": {
"type": "string"
}
},
{
"name": "messageType",
"in": "path",
"description": "Akeldo message Type",
"required": true,
"schema": {
"type": "string"
}
}
],
"responses": {
"200": {
"description": "Found in akeldo"
},
"400": {
"description": "Bad Request",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"403": {
"description": "Forbidden",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"404": {
"description": "Not found in akeldo",
"content": {}
},
"409": {
"description": "Conflict",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
},
"500": {
"description": "Internal Server Error",
"content": {
"*/*": {
"schema": {
"$ref": "#/components/schemas/ErrorResponse"
}
}
}
}
}
}
}
},
"components": {
"schemas": {
"EpsCode": {
"required": [
"code",
"templateNo",
"templateValues"
],
"type": "object",
"properties": {
"code": {
"type": "string",
"description": "Unique code for error/message."
},
"templateNo": {
"type": "string",
"description": "Template for Norwegian message. '${name}' used as placeholder for values."
},
"templateEn": {
"type": "string",
"description": "Template for English message. '${name}' used as placeholder for values."
},
"templateValues": {
"type": "object",
"additionalProperties": {
"type": "string",
"description": "Values for template placeholders (if any)."
},
"description": "Values for template placeholders (if any)."
}
}
},
"ErrorResponse": {
"type": "object",
"properties": {
"timestamp": {
"type": "string"
},
"status": {
"type": "integer",
"format": "int32"
},
"error": {
"type": "string"
},
"exception": {
"type": "string"
},
"message": {
"type": "string"
},
"technicalMessage": {
"type": "string"
},
"path": {
"type": "string"
},
"errorCode": {
"type": "string"
},
"epsErrorCode": {
"$ref": "#/components/schemas/EpsCode"
}
}
},
"SettlementStatusChangeAction": {
"type": "object",
"properties": {
"status": {
"type": "string",
"enum": [
"NEW",
"MORTGAGE_IN_PROGRESS",
"RECEIPT_IN_PROGRESS",
"CANCELLED"
]
}
},
"description": "Settlement status change action"
},
"Address": {
"required": [
"city",
"streetName",
"zipCode"
],
"type": "object",
"properties": {
"streetName": {
"maxLength": 100,
"minLength": 1,
"type": "string",
"description": "Name of the street"
},
"zipCode": {
"pattern": "[\\d]{4}",
"type": "string",
"description": "Zip code"
},
"city": {
"maxLength": 100,
"minLength": 1,
"type": "string",
"description": "City"
}
},
"description": "Address of the real estate"
},
"Amount": {
"required": [
"currency",
"value"
],
"type": "object",
"properties": {
"value": {
"type": "number"
},
"currency": {
"$ref": "#/components/schemas/Currency"
}
}
},
"Area": {
"required": [
"areaType",
"squareMeter"
],
"type": "object",
"properties": {
"squareMeter": {
"minimum": 0,
"type": "integer",
"description": "The area in square meters",
"format": "int32"
},
"areaType": {
"type": "string",
"description": "The area type"
}
}
},
"BondRealEstateRequest": {
"required": [
"buyers",
"hjemmelshavere",
"propertyKey",
"sellers"
],
"type": "object",
"allOf": [
{
"$ref": "#/components/schemas/RealEstateRequest"
},
{
"type": "object",
"properties": {
"propertyKey": {
"type": "string"
},
"ownershipType": {
"type": "string"
}
}
}
]
},
"BrokerDeclaration": {
"required": [
"declarations"
],
"type": "object",
"properties": {
"declarations": {
"type": "array",
"items": {
"$ref": "#/components/schemas/Declaration"
}
},
"_links": {
"$ref": "#/components/schemas/Links"
}
},
"description": "List of declaration from the real estate broker that is a part of the flow decision (paper or digital). If any of the declarations has active=true, the settlement will have paper flow"
},
"CondominiumRealEstateRequest": {
"required": [
"buyers",
"hjemmelshavere",
"propertyKey",
"sellers"
],
"type": "object",
"allOf": [
{
"$ref": "#/components/schemas/RealEstateRequest"
},
{
"type": "object",
"properties": {
"propertyKey": {
"type": "string"
},
"realSameier": {
"type": "array",
"items": {
"$ref": "#/components/schemas/Realsameie"
}
},
"ownershipType": {
"type": "string"
}
}
}
]
},
"ContactInformation": {
"required": [
"organizationName"
],
"type": "object",
"properties": {
"organizationName": {
"type": "string"
},
"organizationId": {
"type": "string"
},
"contactPerson": {
"$ref": "#/components/schemas/ContactPerson"
}
},
"description": "Contact information for this settlement"
},
"ContactPerson": {
"required": [
"name"
],
"type": "object",
"properties": {
"name": {
"maxLength": 100,
"minLength": 1,
"type": "string"
},
"email": {
"maxLength": 100,
"minLength": 2,
"type": "string"
},
"phoneNumber": {
"maxLength": 20,
"minLength": 4,
"type": "string"
},
"phoneNumberDirect": {
"maxLength": 20,
"minLength": 4,
"type": "string"
}
},
"description": "Contact person for this settlement"
},
"ContractDetails": {
"type": "object",
"properties": {
"payment": {
"$ref": "#/components/schemas/Payment"
},
"handoverDate": {
"type": "string",
"description": "Handover date",
"format": "date"
},
"bidAcceptedDate": {
"type": "string",
"description": "\n                \"Bid accepted date\"\n                <span style=\"color:red\">NEW</span>.\n                ",
"format": "date"
},
"partOfSharedDebt": {
"$ref": "#/components/schemas/Amount"
},
"partOfSharedWealth": {
"$ref": "#/components/schemas/Amount"
}
},
"description": "Details about the sale contract"
},
"CooperativeRealEstateRequest": {
"required": [
"buyers",
"hjemmelshavere",
"propertyKey",
"sellers"
],
"type": "object",
"allOf": [
{
"$ref": "#/components/schemas/RealEstateRequest"
},
{
"type": "object",
"properties": {
"propertyKey": {
"type": "string"
},
"businessManager": {
"$ref": "#/components/schemas/Organization"
},
"floorNumber": {
"maxLength": 2147483647,
"minLength": 1,
"type": "string",
"description": "Floor number"
},
"area": {
"$ref": "#/components/schemas/Area"
},
"ownershipType": {
"type": "string"
}
}
}
]
},
"Currency": {
"type": "string",
"description": "Currency according to ISO 4217",
"enum": [
"ATS",
"AUD",
"BEC",
"BEF",
"BGL",
"BGN",
"BRC",
"CAD",
"CHF",
"CSK",
"CYP",
"CZK",
"DEM",
"DKK",
"ECU",
"EEK",
"ESC",
"ESP",
"EUR",
"FIM",
"FRF",
"GBP",
"GRD",
"HKD",
"HUF",
"IEP",
"ISK",
"ITL",
"JPY",
"KRW",
"LTL",
"LUF",
"LVL",
"MTL",
"NLG",
"NOK",
"NZD",
"PKR",
"PLN",
"PLZ",
"PTE",
"ROL",
"SDR",
"SEK",
"SGD",
"SIT",
"SKK",
"SUR",
"SYP",
"THB",
"TRL",
"TWD",
"USD",
"XEU",
"YUD",
"ZAR"
]
},
"Declaration": {
"required": [
"key",
"paperFlow"
],
"type": "object",
"properties": {
"key": {
"type": "string",
"description": "List of available declarations(only served in Norwegian)",
"enum": [
"NOT_ABLE_TO_SIGN_ELECTRONICALLY",
"CAN_NOT_PRODUCE_DIGITAL_PANTEDOKUMENT",
"TRANSFER_CONTAINS_OF_OTHER_DEALS_TO_TINGLYSE",
"TRANSFER_DEMANDS_ATTACHMENTS",
"TRANSFER_FROM_OTHER_THAN_HJEMMELSHAVER",
"TRANSFER_IS_INHERITANCE",
"TRANSFER_CONTAINS_DELETION_OF_FESTEKONTRAKT",
"TRANSFER_IS_BORETT_2_13"
]
},
"flowCriteria": {
"type": "string",
"description": "A phrase describing a flow as an assumption. If the assumption is false, it means paper flow. (only served in Norwegian)",
"example": "'Minst en av partene må signere på papir.' (At least one actor cant't sign electronically)"
},
"paperFlow": {
"type": "boolean",
"description": "True set true if will set flow to paper"
},
"order": {
"type": "integer",
"description": "Sorting order",
"format": "int32",
"example": 10
},
"longDescription": {
"type": "string",
"description": "A more detailed description of the assumption(flowCriteria). (only served in Norwegian)"
}
}
},
"Fraction": {
"required": [
"denominator",
"numerator"
],
"type": "object",
"properties": {
"numerator": {
"minimum": 1,
"type": "integer",
"description": "Numerator (teller). Must be greater than zero",
"format": "int64"
},
"denominator": {
"minimum": 1,
"type": "integer",
"description": "Denominator (nevner). Must be greater than zero",
"format": "int64"
}
},
"description": "Fraction describes a part of a property/cooperative share"
},
"JuridicalPerson": {
"required": [
"name",
"officialId"
],
"type": "object",
"properties": {
"officialId": {
"type": "string",
"description": "Organization number",
"example": "987654321"
},
"name": {
"type": "string",
"description": "Organization name"
}
},
"description": "An organization"
},
"Links": {
"type": "object",
"additionalProperties": {
"$ref": "#/components/schemas/Link"
}
},
"MatrikkelRealEstateRequest": {
"required": [
"buyers",
"hjemmelshavere",
"propertyKey",
"sellers"
],
"type": "object",
"allOf": [
{
"$ref": "#/components/schemas/RealEstateRequest"
},
{
"type": "object",
"properties": {
"propertyKey": {
"type": "string"
},
"realSameier": {
"type": "array",
"items": {
"$ref": "#/components/schemas/Realsameie"
}
},
"ownershipType": {
"type": "string"
}
}
}
]
},
"Organization": {
"required": [
"organizationNumber"
],
"type": "object",
"properties": {
"organizationNumber": {
"type": "string",
"description": "The organization number according to 'Enhetsregisteret'."
},
"name": {
"maxLength": 100,
"minLength": 1,
"type": "string",
"description": "The name of the organization."
}
},
"description": "Organization with name and organization number."
},
"Payment": {
"type": "object",
"properties": {
"purchasePrice": {
"$ref": "#/components/schemas/Amount"
},
"additionalCost": {
"$ref": "#/components/schemas/Amount"
},
"accountNumber": {
"type": "string",
"description": "Account number"
},
"customerIdentificationNumber": {
"type": "string",
"description": "KID number for invoicing"
},
"paymentDescription": {
"type": "string",
"description": "Other description if invoice KID number is unavailable"
}
},
"description": "Information about the price, fees, accounts, etc."
},
"Person": {
"required": [
"name",
"officialId"
],
"type": "object",
"properties": {
"officialId": {
"type": "string",
"description": "Organization number (9 digits) or personal number (11 digits)",
"example": "26059765131"
},
"name": {
"type": "string"
}
},
"description": "A person or an organization"
},
"RealEstateBuyer": {
"required": [
"buyer"
],
"type": "object",
"properties": {
"buyer": {
"$ref": "#/components/schemas/Person"
},
"fraction": {
"$ref": "#/components/schemas/Fraction"
}
}
},
"RealEstateHjemmelshaver": {
"required": [
"hjemmelshaver"
],
"type": "object",
"properties": {
"hjemmelshaver": {
"$ref": "#/components/schemas/Person"
},
"fraction": {
"$ref": "#/components/schemas/Fraction"
}
},
"description": "Owner of a real estate according to Land Registry"
},
"RealEstateRequest": {
"required": [
"buyers",
"hjemmelshavere",
"propertyKey",
"sellers"
],
"type": "object",
"properties": {
"propertyKey": {
"type": "string",
"description": "The id of a real estate",
"example": "Cadastre: 4601-12-321-0-0, Cooperative share/aksje/obligasjon: 952780905-125"
},
"ownershipType": {
"type": "string",
"description": "Type of ownership"
},
"sellers": {
"type": "array",
"items": {
"$ref": "#/components/schemas/RealEstateSellerDto"
}
},
"buyers": {
"type": "array",
"items": {
"$ref": "#/components/schemas/RealEstateBuyer"
}
},
"hjemmelshavere": {
"type": "array",
"items": {
"$ref": "#/components/schemas/RealEstateHjemmelshaver"
}
},
"address": {
"$ref": "#/components/schemas/Address"
}
},
"description": "RealEstate is a uniqely identified object. Either cadastre(matrikkel), cooperative share(borettsandel) or less common types like obligasjonsleiliget or aksjeleilighet",
"discriminator": {
"propertyName": "ownershipType",
"mapping": {
"COOPRATIVE": "#/components/schemas/CooperativeRealEstateRequest",
"STOCK": "#/components/schemas/StockRealEstateRequest",
"BOND": "#/components/schemas/BondRealEstateRequest",
"OWNED": "#/components/schemas/MatrikkelRealEstateRequest",
"CONDOMINIUM": "#/components/schemas/CondominiumRealEstateRequest"
}
}
},
"RealEstateSellerDto": {
"required": [
"seller"
],
"type": "object",
"properties": {
"seller": {
"$ref": "#/components/schemas/Person"
},
"fraction": {
"$ref": "#/components/schemas/Fraction"
}
}
},
"Realsameie": {
"required": [
"fraction",
"propertyKey"
],
"type": "object",
"properties": {
"propertyKey": {
"type": "string",
"description": "Propertykey, must be of type matrikkel"
},
"fraction": {
"$ref": "#/components/schemas/Fraction"
}
}
},
"SettlementRequest": {
"required": [
"brokerDeclaration",
"contractDetails",
"financialSources",
"realEstates"
],
"type": "object",
"properties": {
"externalReference": {
"type": "string",
"description": "External reference, value set by client"
},
"realEstates": {
"type": "array",
"description": "List of real estates that is a part of the settlement. At least one is required",
"items": {
"oneOf": [
{
"$ref": "#/components/schemas/RealEstateRequest"
},
{
"$ref": "#/components/schemas/BondRealEstateRequest"
},
{
"$ref": "#/components/schemas/CondominiumRealEstateRequest"
},
{
"$ref": "#/components/schemas/CooperativeRealEstateRequest"
},
{
"$ref": "#/components/schemas/MatrikkelRealEstateRequest"
},
{
"$ref": "#/components/schemas/StockRealEstateRequest"
}
]
}
},
"brokerDeclaration": {
"$ref": "#/components/schemas/BrokerDeclaration"
},
"contractDetails": {
"$ref": "#/components/schemas/ContractDetails"
},
"ownerDepartmentId": {
"type": "integer",
"description": "For internal Ambita use only",
"format": "int64"
},
"contactInformation": {
"$ref": "#/components/schemas/ContactInformation"
},
"financialSources": {
"type": "array",
"description": "Source of financing",
"items": {
"$ref": "#/components/schemas/JuridicalPerson"
}
},
"encodedProspectURL": {
"type": "string",
"description": "Link to prospect. Should be URLencoded (UTF 8)."
}
},
"description": "Data for settlement creation"
},
"StockInformation": {
"type": "object",
"properties": {
"firstStockNumber": {
"minimum": 0,
"type": "integer",
"format": "int32"
},
"lastStockNumber": {
"minimum": 0,
"type": "integer",
"format": "int32"
},
"shareValue": {
"minimum": 0,
"type": "integer",
"description": "Pålydende verdi. Nominal share value.",
"format": "int64"
}
}
},
"StockRealEstateRequest": {
"required": [
"buyers",
"hjemmelshavere",
"propertyKey",
"sellers"
],
"type": "object",
"allOf": [
{
"$ref": "#/components/schemas/RealEstateRequest"
},
{
"type": "object",
"properties": {
"propertyKey": {
"type": "string"
},
"stockInformation": {
"$ref": "#/components/schemas/StockInformation"
},
"businessManager": {
"$ref": "#/components/schemas/Organization"
},
"floorNumber": {
"maxLength": 2147483647,
"minLength": 1,
"type": "string",
"description": "Floor number"
},
"area": {
"$ref": "#/components/schemas/Area"
},
"ownershipType": {
"type": "string"
}
}
}
]
},
"BankInformation": {
"type": "object",
"properties": {
"department": {
"$ref": "#/components/schemas/Department"
}
},
"description": "Information about the bank that has submitted the intention"
},
"Cadastre": {
"required": [
"cadastralUnitNumber",
"leaseholdUnitNumber",
"municipalityNumber",
"sectionNumber",
"unitNumber"
],
"type": "object",
"properties": {
"municipalityNumber": {
"type": "integer",
"description": "In Norwegian: Kommunenummer",
"format": "int32"
},
"cadastralUnitNumber": {
"type": "integer",
"description": "In Norwegian: Gardsnummer",
"format": "int32"
},
"unitNumber": {
"type": "integer",
"description": "In Norwegian: Bruksnummer",
"format": "int32"
},
"leaseholdUnitNumber": {
"type": "integer",
"description": "In Norwegian: Festenummer",
"format": "int32"
},
"sectionNumber": {
"type": "integer",
"description": "In Norwegian: Seksjonsnummer",
"format": "int32"
}
},
"description": "Matrikkel"
},
"Capability": {
"required": [
"flow"
],
"type": "object",
"properties": {
"flow": {
"$ref": "#/components/schemas/Flow"
},
"reason": {
"type": "string",
"description": "If the flow is 'PAPER' this will contain the reason. If the flow is 'DIGITAL' this field is empty"
}
},
"description": "Flow capability, PAPER og DIGITAL and if flow si PAPER it contains the reason"
},
"CollaborationCapability": {
"required": [
"capability",
"description"
],
"type": "object",
"properties": {
"capability": {
"type": "string"
},
"description": {
"type": "string"
}
},
"description": "A capability of the collaboration to deliver data of the specified type"
},
"CooperativeRealEstateDto": {
"required": [
"buyers",
"cooperativeShare",
"hjemmelshavere",
"ownershipType",
"propertyKey",
"sellers"
],
"type": "object",
"allOf": [
{
"$ref": "#/components/schemas/RealEstate"
},
{
"type": "object",
"properties": {
"propertyKey": {
"type": "string"
},
"cooperativeShare": {
"$ref": "#/components/schemas/CooperativeShare"
},
"businessManager": {
"$ref": "#/components/schemas/Organization"
},
"floorNumber": {
"type": "string",
"description": "Floor number"
},
"area": {
"$ref": "#/components/schemas/Area"
}
}
}
]
},
"CooperativeShare": {
"required": [
"organizationNumber",
"shareNumber"
],
"type": "object",
"properties": {
"organizationNumber": {
"type": "integer",
"format": "int32"
},
"shareNumber": {
"type": "integer",
"format": "int32"
}
},
"description": "Borettsandel"
},
"Department": {
"required": [
"organization"
],
"type": "object",
"properties": {
"name": {
"type": "string"
},
"organization": {
"$ref": "#/components/schemas/OrganizationDto"
}
}
},
"Document": {
"required": [
"documentType",
"owner",
"uniqueIdentifier"
],
"type": "object",
"properties": {
"uniqueIdentifier": {
"type": "string",
"description": "Unique identifier for the document"
},
"description": {
"type": "string",
"description": "Document description"
},
"customerReference": {
"type": "string"
},
"mimeType": {
"type": "string",
"description": "A label used to identify the data type the document is saved in",
"enum": [
"text/BIDXML, text/DummySDO, application/pdf, text/xml"
]
},
"settlementUid": {
"type": "string"
},
"documentType": {
"type": "string",
"description": "Documenttype",
"enum": [
"MORTGAGE",
"BANK_INTENTION"
]
},
"meta": {
"$ref": "#/components/schemas/DocumentMeta"
},
"created": {
"type": "string",
"format": "date-time"
},
"status": {
"$ref": "#/components/schemas/MessageStatus"
},
"owner": {
"$ref": "#/components/schemas/UserDto"
},
"errorCode": {
"$ref": "#/components/schemas/DocumentResourceErrorCodeDto"
},
"_links": {
"$ref": "#/components/schemas/Links"
}
},
"description": "A document :-)"
},
"DocumentMeta": {
"type": "object",
"properties": {
"tinglysingsInformation": {
"$ref": "#/components/schemas/Tinglysingsinformasjon"
}
},
"description": "Extra information about the document "
},
"DocumentResourceErrorCodeDto": {
"required": [
"message"
],
"type": "object",
"properties": {
"code": {
"type": "string",
"description": "Code register error code"
},
"message": {
"type": "string",
"description": "Message detailing the cause of the error"
}
},
"description": "Error code and detailing message"
},
"Flow": {
"type": "string",
"description": "\n * PAPER, tinglysing må foregå på papir    \n * DIGITAL, tinglysing vil foregå digitalt    \n",
"enum": [
"PAPER",
"DIGITAL"
]
},
"FlowValidation": {
"required": [
"code",
"message"
],
"type": "object",
"properties": {
"message": {
"type": "string"
},
"code": {
"type": "string",
"description": "Codes for reasons for PAPER flow",
"enum": [
"NO_OFFICIAL_ID",
"BROKER_DECLARATION",
"RETTIGHETSHAVER_WITH_LOEPENUMMER",
"BORETTSANDEL_NULLKONSESJON",
"REMARKS_ON_PERSON",
"PAPERFLOW_DUE_TO_BORETT_2_13",
"CADASTRE_ACREAGE",
"BUYER_YOUNGER_THAN_18",
"SELLER_YOUNGER_THAN_18",
"BANK_INTENTION"
]
}
},
"description": "The result of one flowvalidation. "
},
"IntentionFromBank": {
"required": [
"created",
"intentionStatus",
"uniqueIdentifier"
],
"type": "object",
"properties": {
"uniqueIdentifier": {
"type": "string"
},
"created": {
"type": "string",
"format": "date-time"
},
"priority": {
"$ref": "#/components/schemas/Priority"
},
"capability": {
"$ref": "#/components/schemas/Capability"
},
"amount": {
"$ref": "#/components/schemas/Amount"
},
"reference": {
"type": "string"
},
"bankInformation": {
"$ref": "#/components/schemas/BankInformation"
},
"intentionStatus": {
"$ref": "#/components/schemas/MessageStatus"
}
}
},
"MatrikkelRealEstateDto": {
"required": [
"buyers",
"cadastre",
"hjemmelshavere",
"ownershipType",
"propertyKey",
"realSameier",
"sellers"
],
"type": "object",
"allOf": [
{
"$ref": "#/components/schemas/RealEstate"
},
{
"type": "object",
"properties": {
"propertyKey": {
"type": "string"
},
"cadastre": {
"$ref": "#/components/schemas/Cadastre"
},
"realSameier": {
"type": "array",
"items": {
"$ref": "#/components/schemas/Realsameie"
}
}
}
}
]
},
"MessageStatus": {
"type": "string",
"description": "Intention status",
"enum": [
"PENDING",
"ACCEPTED",
"REJECTED",
"SENT"
]
},
"OrganizationDto": {
"required": [
"name"
],
"type": "object",
"properties": {
"name": {
"type": "string"
},
"code": {
"type": "string"
},
"orgNr": {
"type": "string"
}
}
},
"Priority": {
"type": "object",
"properties": {
"text": {
"type": "string"
}
}
},
"RealEstate": {
"required": [
"buyers",
"hjemmelshavere",
"ownershipType",
"propertyKey",
"sellers"
],
"type": "object",
"properties": {
"propertyKey": {
"type": "string",
"description": "The id of a real estate",
"example": "Cadastre: 4601-12-321-0-0, Cooperative share/aksje/obligasjon: 952780905-125"
},
"ownershipType": {
"type": "string",
"description": "Type of ownership"
},
"sellers": {
"type": "array",
"items": {
"$ref": "#/components/schemas/RealEstateSellerDto"
}
},
"buyers": {
"type": "array",
"items": {
"$ref": "#/components/schemas/RealEstateBuyer"
}
},
"hjemmelshavere": {
"type": "array",
"items": {
"$ref": "#/components/schemas/RealEstateHjemmelshaver"
}
},
"address": {
"$ref": "#/components/schemas/Address"
}
},
"discriminator": {
"propertyName": "ownershipType",
"mapping": {
"COOPRATIVE": "#/components/schemas/CooperativeRealEstateDto",
"STOCK": "#/components/schemas/StockRealEstateDto",
"BOND": "#/components/schemas/RealEstate",
"OWNED": "#/components/schemas/MatrikkelRealEstateDto",
"CONDOMINIUM": "#/components/schemas/MatrikkelRealEstateDto"
}
}
},
"Rettsstiftelsesinformasjon": {
"required": [
"rettsstiftelsesnummer",
"rettsstiftelsesreferanse"
],
"type": "object",
"properties": {
"rettsstiftelsesreferanse": {
"type": "string",
"description": "A right reference"
},
"rettsstiftelsesnummer": {
"type": "integer",
"description": "Right number",
"format": "int32"
}
},
"description": "Identifier of a right within a registered document"
},
"SettlementDataOrigin": {
"type": "string",
"description": "Describes from which party the settlement data originated.",
"enum": [
"BROKER",
"BANK"
]
},
"SettlementResource": {
"required": [
"collaborationCapabilities",
"dataOrigin",
"documents",
"flow",
"flowValidations",
"intentionsFromBank",
"realEstates",
"status",
"uniqueIdentifier"
],
"type": "object",
"properties": {
"uniqueIdentifier": {
"type": "string",
"description": "Unique identifier for a settlement",
"readOnly": true
},
"status": {
"type": "string",
"description": "Possible states for a settlement. The set of states depends on who created the settlement. A settlement created by a broker has one set of states and the same goes for a settlement created as part of a bank intention process",
"format": "byte",
"readOnly": true
},
"contractDetails": {
"$ref": "#/components/schemas/ContractDetails"
},
"owner": {
"$ref": "#/components/schemas/UserDto"
},
"realEstates": {
"type": "array",
"items": {
"$ref": "#/components/schemas/RealEstate"
}
},
"documents": {
"type": "array",
"items": {
"$ref": "#/components/schemas/Document"
}
},
"flowValidations": {
"type": "array",
"items": {
"$ref": "#/components/schemas/FlowValidation"
}
},
"intentionsFromBank": {
"type": "array",
"items": {
"$ref": "#/components/schemas/IntentionFromBank"
}
},
"externalReference": {
"type": "string",
"description": "External reference, value set by client"
},
"flow": {
"$ref": "#/components/schemas/Flow"
},
"contactInformation": {
"$ref": "#/components/schemas/ContactInformation"
},
"dataOrigin": {
"$ref": "#/components/schemas/SettlementDataOrigin"
},
"collaborationCapabilities": {
"type": "array",
"items": {
"$ref": "#/components/schemas/CollaborationCapability"
}
},
"encodedProspectURL": {
"type": "string",
"description": "Link to prospect. URLencoded (UTF 8)"
},
"_links": {
"$ref": "#/components/schemas/Links"
}
},
"description": "The complete settlement with broker declaration and related documents(documents without dokument payload). This resource contains a link to retrieve all document with rel - allDocuments"
},
"Stock": {
"required": [
"organizationNumber",
"stockNumber"
],
"type": "object",
"properties": {
"organizationNumber": {
"type": "integer",
"description": "Organization number for the Stock appartment. Norsk: Organisasjonsnummeret til aksjeleiligheten",
"format": "int32"
},
"stockNumber": {
"type": "integer",
"description": "Identifies the appartment. Norsk: Aksjeleilighetsnummeret",
"format": "int32"
}
},
"description": "Aksjeleilighet"
},
"StockRealEstateDto": {
"required": [
"buyers",
"hjemmelshavere",
"ownershipType",
"propertyKey",
"sellers",
"stock"
],
"type": "object",
"allOf": [
{
"$ref": "#/components/schemas/RealEstate"
},
{
"type": "object",
"properties": {
"propertyKey": {
"type": "string"
},
"stock": {
"$ref": "#/components/schemas/Stock"
},
"stockInformation": {
"$ref": "#/components/schemas/StockInformation"
},
"businessManager": {
"$ref": "#/components/schemas/Organization"
},
"floorNumber": {
"type": "string",
"description": "Floor number"
},
"area": {
"$ref": "#/components/schemas/Area"
}
}
}
]
},
"Tinglysingsinformasjon": {
"required": [
"rettsstiftelsesinformasjon"
],
"type": "object",
"properties": {
"documentReference": {
"type": "string",
"description": "Reference to the document"
},
"registreringstidspunkt": {
"type": "string",
"description": "The date and time of registration with the Land Registry",
"format": "date-time"
},
"behandlingsutfall": {
"type": "string",
"description": "The outcome of the registration",
"enum": [
"TINGLYST",
"NEKTET",
"AVVIST",
"UAVKLART",
"IKKE_GODKJENT"
]
},
"dokumentaar": {
"type": "integer",
"description": "Part of the document identifier(dokumentnummer): Year of registration (requires behandlingsutfall = 'TINGLYST')",
"format": "int32"
},
"dokumentnummer": {
"type": "integer",
"description": "Part of the document identifier: The serial number (requires behandlingsutfall = 'TINGLYST')",
"format": "int64"
},
"embetenummer": {
"type": "integer",
"description": "Part of the document identifier: The registration office (requires behandlingsutfall = 'TINGLYST')",
"format": "int32"
},
"rettsstiftelsesinformasjon": {
"type": "array",
"description": "List of rights within the registered document (requires behandlingsutfall = 'TINGLYST')",
"items": {
"$ref": "#/components/schemas/Rettsstiftelsesinformasjon"
}
}
},
"description": "\nInformation about the dokument after it is registered at the Land Registry\n(Tinglysingen, Statens Kartverk). If the outcome is 'TINGLYST', the elements of the document identifier has values.\n For all other values for outcome, the dokument identifier element are empty(null)\n"
},
"UserDto": {
"type": "object",
"properties": {
"organization": {
"$ref": "#/components/schemas/OrganizationDto"
},
"name": {
"type": "string"
},
"email": {
"type": "string"
}
}
},
"DocumentStatusChangeAction": {
"required": [
"status"
],
"type": "object",
"properties": {
"status": {
"$ref": "#/components/schemas/MessageStatus"
},
"description": {
"type": "string",
"description": "Additional information about status change"
}
},
"description": "Datafield for the new status"
},
"Attachment": {
"type": "object",
"properties": {
"uniqueIdentifier": {
"type": "string",
"description": "Unique identifier for a settlement",
"readOnly": true
},
"description": {
"type": "string"
},
"mimeType": {
"type": "string",
"description": "A label used to identify a type of data in the attachment",
"enum": [
"text/BIDXML, text/DummySDO, application/pdf, text/xml"
]
},
"type": {
"$ref": "#/components/schemas/AttachmentType"
},
"created": {
"type": "string",
"format": "date-time"
},
"propertyKey": {
"type": "string"
},
"_links": {
"$ref": "#/components/schemas/Links"
}
},
"description": "Attachment for a document"
},
"AttachmentType": {
"type": "string",
"description": "Attachment type",
"enum": [
"PREREQUISITE",
"PREREQUISITE_XSLT",
"GRUNNBOKSUTSKRIFT",
"GRUNNBOKSUTSKRIFT_LINK"
]
},
"DocumentResource": {
"required": [
"attachments",
"data",
"documentType",
"owner",
"uniqueIdentifier"
],
"type": "object",
"properties": {
"uniqueIdentifier": {
"type": "string"
},
"description": {
"type": "string"
},
"customerReference": {
"type": "string"
},
"mimeType": {
"type": "string"
},
"settlementUid": {
"type": "string"
},
"documentType": {
"type": "string",
"enum": [
"MORTGAGE",
"BANK_INTENTION"
]
},
"created": {
"type": "string",
"format": "date-time"
},
"status": {
"$ref": "#/components/schemas/MessageStatus"
},
"owner": {
"$ref": "#/components/schemas/UserDto"
},
"data": {
"type": "array",
"description": "Base64 encoded data, in a format that is described by mimetype, that constitutes the document",
"items": {
"type": "string",
"description": "Base64 encoded data, in a format that is described by mimetype, that constitutes the document",
"format": "byte"
}
},
"meta": {
"$ref": "#/components/schemas/DocumentMeta"
},
"attachments": {
"type": "array",
"description": "List of attachments",
"items": {
"$ref": "#/components/schemas/Attachment"
}
},
"errorCode": {
"$ref": "#/components/schemas/DocumentResourceErrorCodeDto"
},
"_links": {
"$ref": "#/components/schemas/Links"
}
},
"description": "The document resource, includes all document date with a list of attachments without attachment.data"
},
"IntentionFromBankRequest": {
"required": [
"capability"
],
"type": "object",
"properties": {
"priority": {
"$ref": "#/components/schemas/Priority"
},
"capability": {
"$ref": "#/components/schemas/Capability"
},
"amount": {
"$ref": "#/components/schemas/Amount"
},
"reference": {
"type": "string"
}
},
"description": "Intention specification from the bank"
},
"DocumentDetailRequest": {
"type": "object",
"properties": {
"shipmentReference": {
"type": "string",
"description": "Deprecated"
},
"treatmentOutcome": {
"type": "string",
"description": "The result of the registration(tinglysingen) at the Land Registry",
"enum": [
"TINGLYST",
"NEKTET",
"AVVIST",
"UAVKLART",
"IKKE_GODKJENT"
]
},
"caseStatus": {
"type": "string",
"description": "The result of the registration process at the Land Registry",
"enum": [
"AVSLUTTET",
"MOTTATT",
"UNDER_BEHANDLING"
]
},
"tinglysingsInformation": {
"$ref": "#/components/schemas/Tinglysingsinformasjon"
}
},
"description": "Extra information about the document"
},
"DocumentRequest": {
"required": [
"data",
"documentType",
"mimeType",
"rettighetshavere"
],
"type": "object",
"properties": {
"documentType": {
"type": "string",
"enum": [
"MORTGAGE",
"BANK_INTENTION"
]
},
"mimeType": {
"type": "string"
},
"description": {
"type": "string"
},
"customerReference": {
"type": "string"
},
"propertyKey": {
"type": "string"
},
"data": {
"type": "array",
"items": {
"type": "string",
"format": "byte"
}
},
"shipmentUid": {
"type": "string"
},
"receiverOrganizationNumber": {
"type": "string"
},
"prerequisite": {
"$ref": "#/components/schemas/Prerequisite"
},
"rettighetshavere": {
"type": "array",
"items": {
"$ref": "#/components/schemas/RettighetshaverFraPant"
}
}
},
"description": "Document data field encoded with b64 and metadata"
},
"Prerequisite": {
"required": [
"data",
"mimeType"
],
"type": "object",
"properties": {
"mimeType": {
"type": "string",
"description": "A label used to identify a type of data in the attachment",
"enum": [
"application/pdf",
"text/xml"
]
},
"data": {
"type": "string",
"description": "The prerequisite letter payload",
"format": "byte"
},
"xslt": {
"type": "string",
"description": "Prerequisite letter transformation xslt. Must be text/xml mimetype. Required if prerequisite is text/xml",
"format": "byte"
}
},
"description": "Prerequisite letter"
},
"RettighetshaverFraPant": {
"required": [
"name",
"organizationNumber"
],
"type": "object",
"properties": {
"name": {
"type": "string"
},
"organizationNumber": {
"type": "string"
}
}
},
"BankIntentionRequest": {
"required": [
"brokerRecipient",
"buyers",
"flowCapability",
"realEstates",
"sender"
],
"type": "object",
"properties": {
"sender": {
"$ref": "#/components/schemas/Sender"
},
"brokerRecipient": {
"$ref": "#/components/schemas/BrokerRecipient"
},
"buyers": {
"$ref": "#/components/schemas/Subjects"
},
"realEstates": {
"type": "array",
"description": "Real estates",
"items": {
"$ref": "#/components/schemas/IntentionRealEstate"
}
},
"flowCapability": {
"$ref": "#/components/schemas/Flow"
}
},
"description": "Data for bank intention creation"
},
"BrokerRecipient": {
"required": [
"organization"
],
"type": "object",
"properties": {
"organization": {
"$ref": "#/components/schemas/Organization"
},
"brokerReference": {
"maxLength": 100,
"minLength": 1,
"type": "string",
"description": "The broker's reference"
}
},
"description": "The broker that shall receive the intention."
},
"IntentionRealEstate": {
"required": [
"propertyObject"
],
"type": "object",
"properties": {
"propertyObject": {
"$ref": "#/components/schemas/PropertyObject"
},
"address": {
"$ref": "#/components/schemas/Address"
}
},
"description": "IntentionRealEstate is a uniqely identified object. Either cadastre(matrikkel), cooperative share(borettsandel) or less common types like obligasjonsleiliget or aksjeleilighet"
},
"OwnershipTypeDto": {
"type": "string",
"description": "Ownership type",
"enum": [
"STOCK",
"COOPRATIVE",
"CONDOMINIUM",
"OWNED",
"BOND"
]
},
"PersonFirstLastName": {
"required": [
"firstName",
"lastName",
"officialId"
],
"type": "object",
"properties": {
"officialId": {
"type": "string",
"description": "National identification number for Norway",
"example": "26059765131"
},
"firstName": {
"maxLength": 100,
"minLength": 1,
"type": "string",
"description": "First name of the buyer."
},
"lastName": {
"maxLength": 100,
"minLength": 1,
"type": "string",
"description": "Last name of the buyer."
},
"middleName": {
"maxLength": 50,
"minLength": 1,
"type": "string",
"description": "Middle name of the buyer."
}
},
"description": "A person in eps."
},
"PropertyObject": {
"required": [
"propertyKey"
],
"type": "object",
"properties": {
"propertyKey": {
"type": "string",
"description": "The id of a real estate",
"example": "Cadastre: 1201-12-321-0-0, Cooperative share/aksje/obligasjon: 952780905-125"
},
"ownershipType": {
"$ref": "#/components/schemas/OwnershipTypeDto"
}
},
"description": "Property object type is ownership type and property key, "
},
"ReturnToDto": {
"required": [
"organization"
],
"type": "object",
"properties": {
"organization": {
"$ref": "#/components/schemas/Organization"
}
},
"description": "ReturnTo"
},
"Sender": {
"required": [
"reference"
],
"type": "object",
"properties": {
"contactPerson": {
"$ref": "#/components/schemas/ContactPerson"
},
"reference": {
"maxLength": 50,
"minLength": 1,
"type": "string",
"description": "Sender's reference."
},
"returnTo": {
"$ref": "#/components/schemas/ReturnToDto"
}
},
"description": "The party that sends the request."
},
"Subjects": {
"type": "object",
"properties": {
"persons": {
"type": "array",
"description": "List of persons",
"items": {
"$ref": "#/components/schemas/PersonFirstLastName"
}
},
"organizations": {
"type": "array",
"description": "List of organizations",
"items": {
"$ref": "#/components/schemas/Organization"
}
}
},
"description": "The parties in a property transaction. Can either be list of persons, a list of organizations or both"
},
"BankIntentionResource": {
"required": [
"brokerRecipient",
"buyers",
"created",
"flowCapability",
"intentionStatus",
"realEstates",
"sender",
"settlementUniqueIdentifier",
"uniqueIdentifier",
"updated"
],
"type": "object",
"properties": {
"uniqueIdentifier": {
"type": "string",
"description": "Unique identifier for the intention"
},
"sender": {
"$ref": "#/components/schemas/Sender"
},
"brokerRecipient": {
"$ref": "#/components/schemas/BrokerRecipient"
},
"buyers": {
"$ref": "#/components/schemas/Subjects"
},
"realEstates": {
"type": "array",
"items": {
"$ref": "#/components/schemas/IntentionRealEstate"
}
},
"flowCapability": {
"$ref": "#/components/schemas/Flow"
},
"settlementUniqueIdentifier": {
"type": "string",
"description": "Settlement identifier"
},
"intentionStatus": {
"$ref": "#/components/schemas/MessageStatus"
},
"created": {
"type": "string",
"format": "date-time"
},
"updated": {
"type": "string",
"format": "date-time"
},
"_links": {
"$ref": "#/components/schemas/Links"
}
},
"description": "The newly created bank intention"
},
"AttachmentRequest": {
"required": [
"data",
"mimeType",
"type"
],
"type": "object",
"properties": {
"type": {
"$ref": "#/components/schemas/AttachmentType"
},
"mimeType": {
"type": "string"
},
"description": {
"type": "string"
},
"propertyKey": {
"type": "string",
"description": "Required for attachments of type 'GRUNNBOKSUTSKRIFT' and 'GRUNNBOKSUTSKRIFT_LINK'"
},
"data": {
"type": "string",
"format": "byte"
}
},
"description": "Attachment request body"
},
"AttachmentResource": {
"type": "object",
"properties": {
"uniqueIdentifier": {
"type": "string"
},
"description": {
"type": "string"
},
"mimeType": {
"type": "string",
"description": "A label used to identify the data type the attachment is saved in",
"enum": [
"text/BIDXML",
"text/DummySDO",
"application/pdf",
"text/xml"
]
},
"type": {
"$ref": "#/components/schemas/AttachmentType"
},
"data": {
"type": "array",
"description": "Base64 encoded data, in a format that is described by mimetype, that constitutes the document",
"items": {
"type": "string",
"description": "Base64 encoded data, in a format that is described by mimetype, that constitutes the document",
"format": "byte"
}
},
"created": {
"type": "string",
"format": "date-time"
},
"propertyKey": {
"type": "string"
},
"settlementUid": {
"type": "string"
},
"_links": {
"$ref": "#/components/schemas/Links"
}
}
},
"Pageable": {
"type": "object",
"properties": {
"page": {
"minimum": 0,
"type": "integer",
"format": "int32"
},
"size": {
"minimum": 1,
"type": "integer",
"format": "int32"
},
"sort": {
"type": "array",
"items": {
"type": "string"
}
}
}
},
"PingResponse": {
"type": "object",
"properties": {
"online": {
"type": "boolean"
},
"version": {
"type": "string"
},
"env": {
"type": "string"
},
"latency": {
"type": "string"
},
"details": {
"type": "array",
"items": {
"$ref": "#/components/schemas/SubsystemPingResponse"
}
},
"status_time": {
"type": "string",
"format": "date-time"
},
"system": {
"type": "string"
},
"release_time": {
"type": "string",
"format": "date-time"
},
"started_time": {
"type": "string",
"format": "date-time"
}
}
},
"SubsystemPingResponse": {
"type": "object",
"properties": {
"required": {
"type": "boolean"
},
"component": {
"type": "string"
},
"available": {
"type": "boolean"
},
"latency": {
"type": "string"
},
"message": {
"type": "string"
},
"uptodate_time": {
"type": "string",
"format": "date-time"
}
}
},
"FlowValidationResource": {
"required": [
"flow",
"propertyKey",
"reasonsForPaperFlow"
],
"type": "object",
"properties": {
"propertyKey": {
"type": "string"
},
"flow": {
"$ref": "#/components/schemas/Flow"
},
"reasonsForPaperFlow": {
"type": "array",
"items": {
"$ref": "#/components/schemas/FlowValidation"
}
}
},
"description": "The result of a flow validation. If the result is DIGITAL no reasons for paper flow will be give."
},
"EventResource": {
"required": [
"created",
"settlementUid",
"type"
],
"type": "object",
"properties": {
"eventId": {
"type": "integer",
"description": "Unique id for the evnt. For two events, if event2.id > event1.id event1 is created before(or at the same time) event1 and event2.created >= event1.created",
"format": "int64",
"readOnly": true
},
"type": {
"$ref": "#/components/schemas/EventType"
},
"text": {
"type": "string",
"description": "Description of event type."
},
"description": {
"type": "string",
"description": "Additional information regarding the event."
},
"created": {
"type": "string",
"format": "date-time"
},
"settlementUid": {
"type": "string"
},
"externalReference": {
"type": "string"
},
"resources": {
"type": "array",
"items": {
"$ref": "#/components/schemas/ResourceDto"
}
},
"eventCode": {
"$ref": "#/components/schemas/EpsCode"
},
"_links": {
"$ref": "#/components/schemas/Links"
}
},
"description": "Events in september"
},
"EventType": {
"type": "string",
"description": "Type of event",
"readOnly": true,
"enum": [
"SETTLEMENT_CREATED",
"SETTLEMENT_UPDATED",
"SETTLEMENT_CANCELLED",
"MORTGAGE_RECEIVED",
"RECEIPT_ADDED",
"MORTGAGE_SENT_TO_BROKER",
"MORTGAGE_ACCEPTED",
"MORTGAGE_REJECTED",
"MORTGAGE_TINGLYST",
"SETTLEMENT_STATUS_CHANGE",
"INTENTION_RECEIVED",
"INTENTION_RESPONSE_RECEIVED",
"INTENTION_SENT",
"INTENTION_CHANGED",
"SETTLEMENT_MORTGAGE_FINALIZED",
"PREREQUISITE_RECEIVED",
"SETTLEMENT_SEARCHED"
]
},
"ResourceDto": {
"required": [
"resourceUniqueIdentifier",
"type"
],
"type": "object",
"properties": {
"resourceUniqueIdentifier": {
"type": "string"
},
"type": {
"type": "string",
"enum": [
"SETTLEMENT",
"DOCUMENT",
"ATTACHMENT"
]
}
}
},
"EventCodesResource": {
"required": [
"eventCodes"
],
"type": "object",
"properties": {
"eventCodes": {
"type": "array",
"items": {
"$ref": "#/components/schemas/EpsCode"
}
}
}
},
"BrokerDeclarationTemplate": {
"type": "object",
"properties": {
"key": {
"type": "string",
"description": "List of available declarations(only served in Norwegian)",
"enum": [
"NOT_ABLE_TO_SIGN_ELECTRONICALLY",
"CAN_NOT_PRODUCE_DIGITAL_PANTEDOKUMENT",
"TRANSFER_CONTAINS_OF_OTHER_DEALS_TO_TINGLYSE",
"TRANSFER_DEMANDS_ATTACHMENTS",
"TRANSFER_FROM_OTHER_THAN_HJEMMELSHAVER",
"TRANSFER_IS_INHERITANCE",
"TRANSFER_CONTAINS_DELETION_OF_FESTEKONTRAKT",
"TRANSFER_IS_BORETT_2_13"
]
},
"flowCriteria": {
"type": "string",
"description": "A phrase describing a flow as an assumption. If the assumption is false, it means paper flow. (only served in Norwegian)",
"example": "'Minst en av partene må signere på papir.' (At least one actor cant't sign electronically)"
},
"order": {
"type": "integer",
"description": "Sorting order",
"format": "int32",
"example": 10
},
"longDescription": {
"type": "string"
}
}
},
"BrokerDeclarationTemplateResource": {
"type": "object",
"properties": {
"declarations": {
"type": "array",
"items": {
"$ref": "#/components/schemas/BrokerDeclarationTemplate"
}
}
},
"externalDocs": {
"description": "About broker templates",
"url": "https://beta-api.ambita.com/docs/eps-guide.html#list-of-available-declarations"
}
},
"Link": {
"type": "object",
"properties": {
"href": {
"type": "string"
},
"hreflang": {
"type": "string"
},
"title": {
"type": "string"
},
"type": {
"type": "string"
},
"deprecation": {
"type": "string"
},
"profile": {
"type": "string"
},
"name": {
"type": "string"
},
"templated": {
"type": "boolean"
}
}
}
},
"securitySchemes": {
"Bearer": {
"type": "http",
"description": "All request must have a bearer token in the 'Authorization' header with the format of 'Bearer &lt;valid access token&gt;'.",
"scheme": "bearer",
"bearerFormat": "Access token"
}
}
}
}
